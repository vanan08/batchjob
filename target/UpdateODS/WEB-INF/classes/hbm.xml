<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 20 Julai 2010 11:40:18 AM by Hibernate Tools 3.2.5.Beta -->
<hibernate-mapping>
   	<sql-query name="get_document" read-only="true">
   		SELECT * FROM qrtz_cron_triggers
	</sql-query>
	
	<sql-query name="getRolesInUserType" read-only="true">
   		<![CDATA[SELECT cast(A.ROLE_ID AS text) FROM CUSTOM_USER_TYPE_APP_ROLE A WHERE EXISTS(SELECT * FROM CUSTOM_USER_TYPE B WHERE B.ID=A.CUSTOM_USER_TYPE_ID AND USER_TYPE=UPPER(TRIM(:userType)))]]>
	</sql-query>
	
	<sql-query name="getRoleIdByName" read-only="true">
			<![CDATA[SELECT cast(id AS text) role_id, cast(name AS text) role_name FROM keycloak_role
			where trim(name) = trim(:role_name)]]>
    </sql-query>
    
    <sql-query name="getKeycloakRoleByName" read-only="true">
			<![CDATA[SELECT cast(id AS text) role_id FROM keycloak_role
			where application_role=false and upper(trim(name)) = upper(trim(:role))]]>
    </sql-query>
    
	<sql-query name="checkExistStgUser" read-only="true">
   		<![CDATA[select count(*) from custom_stg_user
   		where trim(ID_NRIC) = trim(:id_nric)]]>
	</sql-query>
	
	<sql-query name="checkExistStgUserRole" read-only="true">
   		<![CDATA[select count(*) from custom_stg_user_role
   		where trim(ID_NRIC) = trim(:id_nric) and trim(role_name)=trim(:role_name)]]>
	</sql-query>
	
	<sql-query name="getUserTypeId" read-only="true">
   		<![CDATA[select cast(id AS text) from custom_user_type
   		where trim(user_type) = trim(:user_type) limit 1]]>
	</sql-query>
	
	<sql-query name="getUserSubTypeId" read-only="true">
   		<![CDATA[select cast(id AS text) from custom_user_subtype
   		where trim(user_sub_type) = trim(:user_sub_type) limit 1]]>
	</sql-query>
	
	<sql-query name="getListUserTypesUserNames" read-only="true">
   		select cast(id_nric AS text), cast(user_type AS text), cast(user__sub_type AS text) from custom_stg_user
	</sql-query>
	
	<sql-query name="updateUserTypeSubTypeForUserEntity" read-only="true">
   		<![CDATA[update user_entity set custom_user_type_id = :custom_user_type_id
   		, custom_user_subtype_id = :custom_user_subtype_id where trim(username) = trim(:user_name)]]>
	</sql-query>
	
	<sql-query name="updateCustomUserSubType" read-only="true">
   		<![CDATA[UPDATE CUSTOM_USER_SUBTYPE SET USER_SUB_TYPE=:user_sub_type, CUSTOM_USER_TYPE_ID=:userTypeId WHERE ID=:userSubTypeId]]>
	</sql-query>
	
	<sql-query name="insertSTGUserRole" read-only="true">
   		<![CDATA[INSERT INTO custom_stg_user_role(
            id, id_nric, role_name, created_date)
    	VALUES (uuid_in(cast(md5(cast(random() AS text) || cast(now() AS text)) as cstring)), 
    		:id_nric, :role_name, 
    		cast(now() as timestamp));]]>
	</sql-query>
	
	<sql-query name="insertSTGUser" read-only="true">
   		<![CDATA[INSERT INTO custom_stg_user(
            id_nric, first_name, last_name, email, account_status, mobile, 
            agent_code, agency, need2fa, needtnc, user_type, user__sub_type, 
            created_date)
    	VALUES (:id_nric, :first_name, :last_name, :email, :account_status, :mobile, 
            :agent_code, :agency, :need2fa, :needtnc, :user_type, :user__sub_type, 
            cast(now() as timestamp));]]>
	</sql-query>
	
	<sql-query name="getMaxCreatedDateSTGUser" read-only="true">
   		SELECT cast(max(created_date) as text) FROM CUSTOM_STG_USER
	</sql-query>
	
	<sql-query name="getMaxCreatedDateSTGUserRole" read-only="true">
   		SELECT cast(max(created_date) as text) FROM CUSTOM_STG_USER_ROLE
	</sql-query>
	
	<sql-query name="getUserRealm" read-only="true">
   		SELECT USER_ID, REALM_ID FROM USER_ENTITY
	</sql-query>
	<sql-query name="insertToCustomUser" read-only="true">
   		INSERT INTO CUSTOM_USER(CUSTOM_USER_ID, USER_ENTITY_ID, ACCEPTED_TNC, CREATED_BY, CREATED_DATE)
   		(
   			SELECT uuid_in(cast(md5(cast(random() AS text) || cast(now() AS text)) as cstring)),
   			ID, 'N', 'admin', cast(created_date AS timestamp)
			FROM
			USER_ENTITY WHERE ID NOT IN (SELECT USER_ENTITY_ID FROM CUSTOM_USER)
   		);
	</sql-query>
	
	<sql-query name="getUserEntityByName" read-only="true">
   		  <![CDATA[SELECT * FROM userentity WHERE trim(username)=trim(:username)]]>
	</sql-query>
	
	<sql-query name="getUserTypeRoles" read-only="true">
   		SELECT cast(approle.custom_user_type_id AS text), cast(approle.role_id AS text), cast(usrtype.user_type AS text)
   		FROM public.custom_user_type_app_role approle, public.custom_user_type usrtype
   		WHERE usrtype.id = approle.custom_user_type_id;
	</sql-query>
	
	<sql-query name="getNewUsers" read-only="true">
   		SELECT cast(id_nric AS text), cast(user_type AS text)
		FROM custom_stg_user 
		WHERE id_nric NOT IN 
		(SELECT username FROM USER_ENTITY);
	</sql-query>
	
	<sql-query name="getNewUserId" read-only="true">
   		 <![CDATA[SELECT cast(ID AS text), cast(USERNAME AS text) from USER_ENTITY WHERE trim(username)=trim(:username)]]>
	</sql-query>
	
	<sql-query name="getUserType" read-only="true">
   		SELECT cast(user_type AS text), cast(id AS text), cast(id AS text) from custom_user_type;
	</sql-query>
	
	<sql-query name="getUserSubType" read-only="true">
   		SELECT cast(user_sub_type AS text), cast(id AS text), cast(custom_user_type_id AS text) from custom_user_subtype;
	</sql-query>
	
	<sql-query name="count_new_rows" read-only="true">
   		SELECT count(*) as count_row_input
		FROM custom_stg_user where cast(created_date AS timestamp) > (SELECT cast(created_date AS timestamp) FROM USER_ENTITY where created_date is not null ORDER BY created_date DESC LIMIT 1);;
	</sql-query>
	
	<sql-query name="migrate_user_entity" read-only="true">
		WITH user_tmp AS (
			INSERT INTO USER_ENTITY(ID, REALM_ID, USERNAME, FIRST_NAME, LAST_NAME, MOBILE, EMAIL, ACCOUNT_STATUS, AGENT_CODE, AGENCY, NEED2FA, NEEDTNC, CREATED_DATE)
			(SELECT uuid_in(cast(md5(cast(random() AS text) || cast(now() AS text)) as cstring)), 
			 (SELECT ID FROM REALM WHERE lower(NAME) = 'pse') AS REALM_ID,
			 ID_NRIC, FIRST_NAME, LAST_NAME, MOBILE, EMAIL, ACCOUNT_STATUS, AGENT_CODE, AGENCY, NEED2FA, NEEDTNC, cast(now() AS timestamp)
			 FROM custom_stg_user 
			 WHERE ID_NRIC NOT IN (SELECT USERNAME FROM USER_ENTITY)
			)
		    RETURNING 1
		)
		SELECT count(*) as count_rows_inserted FROM user_tmp;
	</sql-query>
	
	<sql-query name="check_custom_user_entity" read-only="true">
		SELECT DISTINCT count(*) FROM custom_stg_user WHERE user_type NOT IN (SELECT DISTINCT user_type FROM custom_user_type)
    </sql-query>
    
	<sql-query name="migrate_role" read-only="true">
		WITH custom_role_tmp AS (
			INSERT INTO keycloak_role(ID, name, created_date) 
			(SELECT DISTINCT uuid_in(cast(md5(cast(random() AS text) || cast(now() AS text)) as cstring)), role_name, cast(now() AS text) FROM custom_stg_user_role WHERE role_name NOT IN 
			(SELECT DISTINCT name FROM keycloak_role))
			RETURNING 1
		)
		SELECT count(*) as num_role_inserted FROM custom_role_tmp;
    </sql-query>
    
    <sql-query name="user_type_not_mapping" read-only="true">
		SELECT distinct cast(user_type AS text), cast(user__sub_type AS text) as user_sub_type FROM custom_stg_user 
		WHERE user_type NOT IN (SELECT A.user_type
		FROM custom_user_type A, custom_user_subtype B WHERE A.id = B.custom_user_type_id )
    </sql-query>
    
    <sql-query name="user_sub_type_not_mapping" read-only="true">
		SELECT distinct cast(user__sub_type AS text), cast(user_type AS text) FROM custom_stg_user 
		WHERE user__sub_type NOT IN 
		(SELECT B.user_sub_type 
		FROM custom_user_type A, custom_user_subtype B 
		WHERE trim(A.id) = trim(B.custom_user_type_id)  )
    </sql-query>
    
    <sql-query name="insertToCustomUserType" read-only="true">
			INSERT INTO custom_user_type(id, user_type, created_date, updated_date) 
			values(:uuid, upper(:user_type), cast(now() AS timestamp), cast(now() AS timestamp))
    </sql-query>
    
    <sql-query name="insertToCustomUserSubType" read-only="true">
			INSERT INTO custom_user_subtype(
            id, custom_user_type_id, user_sub_type, created_date, updated_date)
    		values (:id, :custom_user_type_id, :user_sub_type, cast(now() AS timestamp), cast(now() AS timestamp));
    </sql-query>
    
    <sql-query name="getNewRolesFromStg" read-only="true">
			SELECT cast(role_name AS text) as rolename FROM custom_stg_user_role WHERE role_name NOT IN (SELECT DISTINCT name FROM keycloak_role);
    </sql-query>
    
    <sql-query name="getPSERealmId" read-only="true">
			SELECT cast(id AS text) as realm_id FROM realm r WHERE name='pse';
    </sql-query>
    
    <sql-query name="getListAppsBelongRealm" read-only="true">
			SELECT cast(realm_id AS text) as app_id FROM realm_application WHERE application_id=(SELECT r.id FROM realm r WHERE name='pse');
    </sql-query>
    
    <sql-query name="insertKeycloakRole" read-only="true">
    			INSERT INTO keycloak_role(
            		id, app_realm_constraint, application_role, name, 
            		realm_id, application, realm, role_state)
    			VALUES (:id, :app_realm_constraint, :application_role, :name, 
            		:realm_id, :application, :realm, :role_state);						
     </sql-query>
     
      <sql-query name="insertUserRoleMapping" read-only="true">
    			INSERT INTO user_role_mapping(
            	user_id,role_id)
    			VALUES (:user_id, :keycloak_role_id);						
     </sql-query>
     
      <sql-query name="getUserRoleMapping" read-only="true">
    			SELECT cast(role_id AS text), cast(user_id AS text) FROM user_role_mapping;						
     </sql-query>
     
     <sql-query name="getRoleId" read-only="true">
			SELECT cast(id AS text) role_id, cast(name AS text) role_name FROM keycloak_role;
    </sql-query>
    <sql-query name="insertToUserEntity" read-only="true">
	   INSERT INTO USER_ENTITY(ID, REALM_ID, USERNAME, FIRST_NAME, LAST_NAME, MOBILE, EMAIL, 
	    ACCOUNT_STATUS, AGENT_CODE, AGENCY, NEED2FA, NEEDTNC, 
	    CREATED_DATE, CUSTOM_USER_TYPE_ID,CUSTOM_USER_SUBTYPE_ID)
		VALUES(
			uuid_in(cast(md5(cast(random() AS text) || cast(now() AS text)) as cstring)), 
			(SELECT ID FROM REALM WHERE lower(NAME) = 'pse'),
			:ID_NRIC, :FIRST_NAME, :LAST_NAME, :MOBILE, :EMAIL, :ACCOUNT_STATUS,
			:AGENT_CODE, :AGENCY, :NEED2FA, :NEEDTNC, cast(now() AS timestamp), :USERTYPEID, :USERSUBTYPEID
		)
	</sql-query>
	
	<sql-query name="updateUserEntityByID" read-only="true">
	    <![CDATA[UPDATE USER_ENTITY SET FIRST_NAME=trim(:first_name),LAST_NAME=:last_name,MOBILE=:mobile,EMAIL=:email,ACCOUNT_STATUS=:account_status,AGENT_CODE=:agent_code,AGENCY=:agency,CUSTOM_USER_TYPE_ID=:user_type_id, CUSTOM_USER_SUBTYPE_ID=:user_subtype_id WHERE ID=trim(:user_id)]]>
	</sql-query>
	
	<sql-query name="checkExistUserEntity" read-only="true">
	    <![CDATA[SELECT * FROM USER_ENTITY WHERE username=:username]]>
	</sql-query>
	
	<sql-query name="getUserEntityByUsername" read-only="true">
	    <![CDATA[SELECT id FROM USER_ENTITY WHERE username=:username]]>
	</sql-query>
	
	<sql-query name="clearUserTypeSubType" read-only="true">
	    <![CDATA[UPDATE USER_ENTITY SET CUSTOM_USER_SUBTYPE_ID=NULL, CUSTOM_USER_TYPE_ID=NULL]]>
	</sql-query>
	
	<sql-query name="deleteSubType" read-only="true">
	    <![CDATA[DELETE FROM CUSTOM_USER_SUBTYPE]]>
	</sql-query>
	
	<sql-query name="deleteUserType" read-only="true">
	    <![CDATA[DELETE FROM CUSTOM_USER_TYPE]]>
	</sql-query>
	
	<sql-query name="deleteUserRoleMappingByUserIdRoleId" read-only="true">
	    <![CDATA[DELETE FROM USER_ROLE_MAPPING WHERE USER_ID=:user_id AND ROLE_ID=:role_id]]>
	</sql-query>
	
	<sql-query name="checkUserType" read-only="true">
	    <![CDATA[SELECT * FROM CUSTOM_USER_TYPE WHERE trim(user_type)=trim(:user_type)]]>
	</sql-query>
	
	<sql-query name="checkUserSubType" read-only="true">
	    <![CDATA[SELECT * FROM CUSTOM_USER_SUBTYPE WHERE trim(user_sub_type)=trim(:user_sub_type)]]>
	</sql-query>
	
</hibernate-mapping>
